<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE urlrewrite PUBLIC "-//tuckey.org//DTD UrlRewrite 3.0//EN"
        "http://tuckey.org/res/dtds/urlrewrite3.0.dtd">

<!--
    Configuration file for UrlRewriteFilter
    http://tuckey.org/urlrewrite/
-->
<urlrewrite use-query-string="true">
  <!-- ##### Kick out requests from Radio Tamil toolbar #### -->
  <rule>
      <condition name="user-agent">Radio\s+Tamil.*</condition>
      <from>.*</from>
		<set type="status">404</set>
      <to>null</to>
  </rule>

    <!-- The next browse url-rewriting rules are for redirecting to canonical "clean" browse urls -->
  <rule>
    <note> Rewriting rule for browse!  Issue a 301 redirect </note>
    <from>/Browse\.do\?owner=(.*?)&amp;(amp;)?issue=(.*?)&amp;(amp;)?catID=(.*)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$1/$3/$5</to>
  </rule>

  <rule>
    <note> Rewriting rule for browse!  Issue a 301 redirect </note>
    <from>/Browse\.do\?owner=(.*?)&amp;(amp;)?issue=(.*?)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$1/$3</to>
  </rule>

  <rule>
    <note> Clean browse urls</note>
    <from>/browse\?owner=(.*?)&amp;(amp;)?issue=(.*?)&amp;(amp;)?catID=(.*)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$1/$3/$5</to>
  </rule>

  <rule>
    <note> Clean browse urls</note>
    <from>/browse\?issue=(.*?)&amp;(amp;)?catID=(.*?)&amp;(amp;)?owner=(.*?)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$5/$1/$3</to>
  </rule>

  <rule>
    <note> Clean browse urls</note>
    <from>/browse\?owner=(.*?)&amp;(amp;)?issue=(.*?)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$1/$3</to>
  </rule>

  <rule>
    <note> Clean browse urls</note>
    <from>/browse\?issue=(.*?)&amp;(amp;)?owner=(.*?)$</from>
	 <to type="permanent-redirect">%{context-path}/browse/$3/$1</to>
  </rule>

  <!-- ###################################################################### 
       These next set of rules match legacy urls and sends a 301 permanent
		 redirect to the new urls.  This should ensure that all old urls continue
		 to work seamlessly.
       ###################################################################### -->
  <rule>
    <note> Generic rewriting rule!  Issue a 301 redirect </note>
    <from>^/DisplayNewsItem\.do(.*)</from>
	 <to type="permanent-redirect">%{context-path}/news/display$1</to>
  </rule>

  <rule>
    <note> Rewriting rule for GetIssueTaxonomy!  Issue a 301 redirect </note>
    <from>^/GetIssueTaxonomy\.do(.*)?$</from>
	 <to type="permanent-redirect">%{context-path}/api/issue-taxonomy$1</to>
  </rule>

  <rule>
    <note> Generic rewriting rule for *.do actions!  Issue a 301 redirect. FIXME: Is this rule required at all? </note>
    <from>^/(.*)\.do(\?.*)?$</from>
	 <to type="permanent-redirect">%{context-path}/$1$2</to>
  </rule>

  <rule>
    <note> For crawled feeds!  Issue a 301 redirect </note>
    <from>^/vm/extras.rss-feeds.vm</from>
	 <to type="permanent-redirect">%{context-path}/extras/crawled-feeds</to>
  </rule>

  <rule>
    <note> For selected topics!  Issue a 301 redirect </note>
    <from>^/vm/category.selection.vm</from>
	 <to type="permanent-redirect">%{context-path}/selected-topics</to>
  </rule>

  <rule>
    <note> For list of known indian feeds!  Issue a 301 redirect </note>
    <from>^/vm/known.indian.rss-feeds.vm</from>
	 <to type="permanent-redirect">%{context-path}/extras/known-indian-feeds</to>
  </rule>

  <rule>
    <note> Login! Issue a 301 redirect. FIXME: Is this rule required? </note>
    <from>^/vm/signin.vm$</from>
	 <to type="permanent-redirect">%{context-path}/forms/login</to>
  </rule>

  <rule>
    <note> Registration! Issue a 301 redirect. FIXME: Is this rule required? </note>
    <from>^/vm/register.vm$</from>
	 <to type="permanent-redirect">%{context-path}/forms/register</to>
  </rule>

  <rule>
    <note> Generic rewriting rule!  Issue a 301 redirect </note>
    <from>^/vm/(.*)\.vm$</from>
	 <to type="permanent-redirect">%{context-path}/about/$1</to>
  </rule>

  <rule>
    <note> Discourage *.action urls!</note>
    <from>^/(.*)\.action(.*)$</from>
	 <to type="permanent-redirect">%{context-path}/$1$2</to>
  </rule>

  <!-- ######################################################################
       These rules below serve 'clean-looking' urls and translate them to
		 what struts2 is encoded to understand
       ###################################################################### -->
  <rule>
    <from>^/?$</from>
	 <to>/selected-topics.action</to>	<!-- default start page is selected-topics page going forward -->
  </rule>

  <rule>
    <note> Clean browse urls - leaf category, xml request </note>
    <from>^/browse/([^\.]+)/([^\.]+)/([^\.]+).xml/?$</from>
	 <to>/browse.action?owner=$1&amp;issue=$2&amp;catID=$3&amp;output=xml</to>
  </rule>

  <rule>
    <note> Clean browse urls - leaf category, json request </note>
    <from>^/browse/([^\.]+)/([^\.]+)/([^\.]+).json/?$</from>
	 <to>/browse.action?owner=$1&amp;issue=$2&amp;catID=$3&amp;output=json</to>
  </rule>

  <rule>
    <note> Clean browse urls - leaf category, html request </note>
    <from>^/browse/([^\.]+)/([^\.]+)/([^\.]+)/?$</from>
	 <to>/browse.action?owner=$1&amp;issue=$2&amp;catID=$3</to>
  </rule>

  <rule>
    <note> Clean browse urls - user issue browse </note>
    <from>^/browse/([^\.]+)/([^\.]+)/?$</from>
	 <to>/browse.action?owner=$1&amp;issue=$2</to>
  </rule>

  <rule>
    <note> Clean browse urls - user account browse </note>
    <from>^/browse/([^\.]+)/?$</from>
	 <to>/browse.action?owner=$1</to>
  </rule>

  <rule>
    <note> 
	    Generic rewrite that appends the ".action" -> with url parameters
		 I am doing some gymnastics here to prevent .css and .js file requests from being rewritten!
	  </note>
    <from>^/([^\.]+)\?(.+)$</from>
	 <to>/$1.action?$2</to>
  </rule>

  <rule>
    <note> 
	    Generic rewrite that appends the ".action" -> without url parameters 
		 I am doing some gymnastics here to prevent .css and .js file requests from being rewritten!
	 </note>
    <from>^/([^\.]+)/?$</from>
	 <to>/$1.action</to>
  </rule>

  <rule>
    <note> Catch all rule! </note>
    <from>(.*)</from>
	 <to>$1</to>
  </rule>

  <!-- #############################
       Outbound rules begin here ...
       ############################# -->
  <outbound-rule>
    <name>Strip URL Session ID's -- copied from the urlrewrite manual</name>
    <note>
        Strip ;jsession=XXX from urls passed through response.encodeURL().
        The characters ? and # are the only things we can use to find out where the jsessionid ends.
        The expression in 'from' below contains three capture groups, the last two being optional.
            1, everything before ;jesessionid
            2, everything after ;jesessionid=XXX starting with a ?  (to get the query string) up to #
            3, everything ;jesessionid=XXX and optionally ?XXX starting with a # (to get the target)
        eg,
        from index.jsp;jsessionid=sss?qqq to index.jsp?qqq
        from index.jsp;jsessionid=sss?qqq#ttt to index.jsp?qqq#ttt
        from index.jsp;jsessionid=asdasdasdsadsadasd#dfds - index.jsp#dfds
        from u.jsp;jsessionid=wert.hg - u.jsp
        from /;jsessionid=tyu - /
    </note>
    <condition name="user-agent">googlebot</condition>
    <from>^(.*?)(?:\;jsessionid=[^\?#]*)?(\?[^#]*)?(#.*)?$</from>
    <to>$1$2$3</to>
  </outbound-rule>

  <outbound-rule>
    <note> Clean browse urls</note>
    <from>/browse\.action\?owner=(.*?)&amp;(amp;)?issue=(.*?)&amp;(amp;)?catID=(.*)$</from>
	 <to>/browse/$1/$3/$5</to>
  </outbound-rule>

  <outbound-rule>
    <note> Clean browse urls</note>
    <from>/browse\.action\?issue=(.*?)&amp;(amp;)?catID=(.*?)&amp;(amp;)?owner=(.*?)$</from>
	 <to>/browse/$5/$1/$3</to>
  </outbound-rule>

  <outbound-rule>
    <note> Clean browse urls</note>
    <from>/browse\.action\?owner=(.*?)&amp;(amp;)?issue=(.*?)$</from>
	 <to>/browse/$1/$3</to>
  </outbound-rule>

  <outbound-rule>
    <note> Clean browse urls</note>
    <from>/browse\.action\?issue=(.*?)&amp;(amp;)?owner=(.*?)$</from>
	 <to>/browse/$3/$1</to>
  </outbound-rule>

  <outbound-rule>
    <note> Clean browse urls</note>
    <from>/browse\.action\?owner=(.*?)$</from>
	 <to>/browse/$1</to>
  </outbound-rule>

  <outbound-rule>
    <note>
        Strips the ".action" suffix in urls
    </note>
    <from>(.*)\.action(.*)$</from>
	 <to>$1$2</to>
  </outbound-rule>
</urlrewrite>
